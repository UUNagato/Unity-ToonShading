#pragma kernel CSMain

RWTexture2D<float4> Result;

#if !defined(PI)
#define PI 3.14159
#endif

#define INTEGRATE_INC 0.02f

float Gaussian(float v, float r)
{
    return 1.0f / sqrt(2.0f * PI * v) * exp(-(r * r) / (2 * v));
}

float3 Scatter(float r)
{
    return Gaussian(0.0064f * 1.414f, r) * float3(0.233f, 0.455f, 0.649f)
		 + Gaussian(0.0484f * 1.414f, r) * float3(0.100f, 0.336f, 0.344f)
		 + Gaussian(0.1870f * 1.414f, r) * float3(0.118f, 0.198f, 0.000f)
		 + Gaussian(0.5670f * 1.414f, r) * float3(0.113f, 0.007f, 0.007f)
		 + Gaussian(1.9900f * 1.414f, r) * float3(0.358f, 0.004f, 0.000f)
		 + Gaussian(7.4100f * 1.414f, r) * float3(0.078f, 0.000f, 0.000f);
}

float3 IntegrateDiffuseScatteringOnRing(float cosTheta, float skinRadius)
{
    float theta = acos(cosTheta);
    float3 totalWeight = 0;
    float3 totalLight = 0;

    float a = -(PI / 2);
    while (a <= (PI / 2))
    {
        float sampleAngle = theta + a;
        float diffuse = saturate(cos(sampleAngle));
        float sampleDist = abs(2.0 * skinRadius * sin(a * 0.5f));
        float3 weights = Scatter(sampleDist);
        totalWeight += weights;
        totalLight += diffuse * weights;
        a += INTEGRATE_INC;
    }
    return totalLight / totalWeight;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    float2 Size = float2(width, height);
    float y = 2.0f * 1.0f / ((id.y + 1) / Size.y);
    float x = lerp(-1, 1, id.x / Size.x);
    float3 s = IntegrateDiffuseScatteringOnRing(x, y);
    Result[id.xy] = float4(s, 1);
}